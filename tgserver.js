const TelegramBot = require("node-telegram-bot-api");
const {
  getAllOpened,
  getWalletBalance,
  getPossitionsInWorkOnBinance,
  getNotRunned,
  orderBinance,
} = require("./hashing");
const { dreamCalc } = require("./dreamCalc");
const { getDailyBalance } = require("./utils/balanceReporter");
const format = require("date-fns/format");
const { getAllRun, killBot } = require("./utils/checkrun");

const token = "5405704788:AAFFoHQJj_st8Lyo3ufi6Eo-bBulirLN3sA";
const chatIds = [165564370, 535043367]; // 535043367
const bot = new TelegramBot(token, { polling: true });

let constant = 0;
let allRunnedProcesses = [];
let allNamesOfRunnedCoins = [];
let buttonsForSell = [];
let coinsNoRun = [];
let notRunnedCoins;

const keyboard = [
  ["üè¶ BALANCE üè¶", "ü™ô COINS ü™ô"],
  ["‚è∞ PROFIT –ó–ê –°–ï–ì–û–î–ù–Ø ‚è∞"],
  ["üõ† –û–°–¢–ê–ù–û–í–ò–¢–¨ –†–ê–ë–û–¢–Ø–ì–£ üõ†"],
  ["üîã –ù–ê–ö–ê–ó–ê–¢–¨ –ù–ï–ü–û–ö–û–†–ù–£–Æ üîã"],
  ["ü§å CALC ü§å"],
];

bot.setMyCommands([
  {
    command: "/start",
    description: "–Ø —Å–∫–∞–∑–∞–ª–∞ —Å—Ç–∞—Ä—Ç—É–µ–º!",
  },
]);

bot.onText(/\/start/, async (msg) => {
  await bot.sendMessage(msg.chat.id, "–ß—ë –Ω–∞–¥–æ?", {
    reply_markup: {
      keyboard,
    },
    parse_mode: "HTML",
    disable_web_page_preview: true,
  });
});

bot.on("message", async (msg) => {
  if (msg.text === "ü™ô COINS ü™ô") {
    try {
      await bot.sendMessage(msg.chat.id, await getAllOpened(), {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      });
    } catch (e) {
      console.log(e);
    }
  }

  if (msg.text === "üè¶ BALANCE üè¶") {
    try {
      await bot.sendMessage(msg.chat.id, await getWalletBalance());
    } catch (e) {
      console.log(e);
    }
  }

  if (msg.text === "–í–´–ô–¢–ò") {
    constant = 0;
    await bot.sendMessage(msg.chat.id, "–í—ã—Ö–æ–¥–∏–º...", {
      reply_markup: {
        keyboard,
      },
    });
    return;
  }

  if (constant === 1) {
    const data = msg.text.trim().split(",");
    await bot.sendMessage(
      msg.chat.id,
      `–ú–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º –±—É–¥–µ—à—å —á–µ—Ä–µ–∑ ${dreamCalc(
        +data[0],
        +data[1],
        +data[2]
      )} –¥–Ω–µ–π(—è)!`
    );
    constant = 0;
    return;
  }

  if (msg.text === "ü§å CALC ü§å") {
    await bot.sendMessage(
      msg.chat.id,
      "–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n –°–¢–ê–†–¢_–î–ï–ü–û, –ñ–ï–õ–ê–ï–ú–´–ô_–î–ï–ü–û, –°–£–¢–û–ß–ù–´–ô –ü–†–û–¶–ï–ù–¢\n\n–ü—Ä–∏–º–µ—Ä:\n1000, 1000, 0.5\n",
      {
        reply_markup: {
          keyboard: [["–í–´–ô–¢–ò"]],
        },
      }
    );

    constant = 1;
    return;
  }

  if (msg.text === "üõ† –û–°–¢–ê–ù–û–í–ò–¢–¨ –†–ê–ë–û–¢–Ø–ì–£ üõ†") {
    const allCoinsInStack = await getPossitionsInWorkOnBinance();
    const runnedString = [];
    for (let coin of allCoinsInStack) {
      const botsInWork = await getAllRun(coin);
      if (botsInWork) runnedString.push(...botsInWork);
    }

    // if (!runnedString.length) {
    allRunnedProcesses = runnedString.map((process) => {
      return process
        .trim()
        .replace(/\s{2,10}/g, " ")
        .split(" ")[1];
    });

    allNamesOfRunnedCoins = runnedString.map((process) => {
      return (
        "üíÄ " +
        process
          .trim()
          .replace(/\s{2,10}/g, " ")
          .split(" ")[11]
          .slice(0, -4) +
        " üíÄ"
      );
    });

    const buttons = [];
    for (let i = 0; i < allNamesOfRunnedCoins.length; i += 2) {
      buttons.push(allNamesOfRunnedCoins.slice(i, i + 2));
    }
    buttons.push(["–í–´–ô–¢–ò"]);

    await bot.sendMessage(msg.chat.id, "üç∫ –í—ã–±–∏—Ä–∞–π, –∫–æ–º—É –ø–æ—Ä–∞ –Ω–∞ –æ—Ç–¥—ã—Ö.", {
      reply_markup: {
        keyboard: buttons,
      },
    });
  }

  if (allNamesOfRunnedCoins.includes(msg.text)) {
    console.log("Ranprocesses:", allRunnedProcesses);
    console.log("Nameof coins:", allNamesOfRunnedCoins);
    const botPosition = allNamesOfRunnedCoins.indexOf(msg.text);
    console.log(botPosition);
    const botPidToKill = allRunnedProcesses[botPosition];
    console.log(botPidToKill);
    await killBot(botPidToKill);
  }

  if (msg.text === "‚è∞ PROFIT –ó–ê –°–ï–ì–û–î–ù–Ø ‚è∞") {
    try {
      const { dailyProfit, percentProfit } = await getDailyBalance();
      await bot.sendMessage(
        msg.chat.id,
        `\nü§ë –ó–∞ —Å–µ–≥–æ–¥–Ω—è (${format(
          new Date(),
          "dd.MM"
        )}) –±–æ—Ç—ã –ø—Ä–∏–Ω–µ—Å–ª–∏:\nüòç $${dailyProfit} –∏–ª–∏ +${percentProfit}% —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è.`
      );
    } catch (e) {
      console.log(e);
    }
  }

  if (msg.text === "üîã –ù–ê–ö–ê–ó–ê–¢–¨ –ù–ï–ü–û–ö–û–†–ù–£–Æ üîã") {
    notRunnedCoins = await getNotRunned();

    coinsNoRun = notRunnedCoins.map((coin) => `üíé ${coin.symbol} üíé`);

    buttonsForSell = notRunnedCoins.map((coin) => {
      return [`üíé ${coin.symbol} üíé`];
    });
    buttonsForSell.push(["–í–´–ô–¢–ò"]);

    await bot.sendMessage(
      msg.chat.id,
      "üî® –í—ã–±–µ—Ä–∏, –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–π–¥–µ—Ç —Å –º–æ–ª–æ—Ç–∫–∞?",
      {
        reply_markup: {
          keyboard: buttonsForSell,
        },
      }
    );
  }

  if (coinsNoRun.includes(msg.text)) {
    const coinClean = msg.text.replace(/üíé/gm, "").trim();
    const [coinToSell] = notRunnedCoins.filter(
      (coin) => coin.symbol === coinClean
    );
    console.log("Sell coin:", coinToSell.symbol, "quantity:", coinToSell.qty);
    await orderBinance(coinToSell.qty, `${coinToSell.symbol}USDT`, "Sell");
    await bot.sendMessage(
      msg.chat.id,
      `‚öñÔ∏è –ù—É —à–æ, –ø—Ä–æ–¥–∞—Ç—å, —Ç–∞–∫ –ø—Ä–æ–¥–∞—Ç—å.\n üëâ ${coinToSell.qty} ${coinToSell.symbol} —Å–æ–∂–∂–µ–Ω—ã!`
    );
  }
});
